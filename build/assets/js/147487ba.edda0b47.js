"use strict";(self.webpackChunkchargily_epay_docs=self.webpackChunkchargily_epay_docs||[]).push([[973],{1696:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var t=n(7462),a=(n(7294),n(3905)),o=n(2004);const r={title:"Chargily ePay with Springboot",sidebar_label:"Springboot",sidebar_position:9,slug:"/epay-springboot"},l=void 0,p={unversionedId:"addons-for-frameworks/Springboot",id:"addons-for-frameworks/Springboot",title:"Chargily ePay with Springboot",description:"",source:"@site/docs/addons-for-frameworks/Springboot.mdx",sourceDirName:"addons-for-frameworks",slug:"/epay-springboot",permalink:"/epay-springboot",draft:!1,editUrl:"https://github.com/Chargily/chargily-dev-docs/docs/addons-for-frameworks/Springboot.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Chargily ePay with Springboot",sidebar_label:"Springboot",sidebar_position:9,slug:"/epay-springboot"},sidebar:"tutorialSidebar",previous:{title:"React Native",permalink:"/epay-react-native"},next:{title:"WooCommerce Plugin",permalink:"/epay-woocomerce"}},s={},c=[{value:"then to make a payment simply inject the ChargilyClient in your service",id:"then-to-make-a-payment-simply-inject-the-chargilyclient-in-your-service",level:4}],y={toc:c};function u(e){let{components:i,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},y,n,{components:i,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Source files on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Chargily/chargily-epay-springboot",title:"Github"},"Github")),(0,a.kt)("h1",{id:"how-to-use"},"How to use"),(0,a.kt)("p",null,"To use this library add the jar to your project libraries (it will be added to maven when possible)"),(0,a.kt)("p",null,"There are two ways to configure keys and secrets:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"by-providing-your-own-configuration-class-like-this"},"By providing your own configuration class like this"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import ChargilyEpayClientConfig;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport static ChargilyEpayConfigParams.*;\n\n@Configuration\n    public class ChargilyEpayConfiguration {\n\n        @Bean\n        public ChargilyEpayClientConfig configureChargily(){\n        ChargilyEpayClientConfig chargilyEpayClientConfig = new ChargilyEpayClientConfig();\n        chargilyEpayClientConfig.put(BASE_URL, "https://epay.chargily.com.dz");\n        chargilyEpayClientConfig.put(API_KEY, "your_api_key");\n        chargilyEpayClientConfig.put(SECRET, "your_secret");\n        return chargilyEpayClientConfig;\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"or-simply-adding-by-these-properties-on-applicationproperties-file"},"or simply adding by these properties on application.properties file"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"chargily.epay.apikey=your_api_key\nchargily.epay.url=https://epay.chargily.com.dz\nchargily.epay.secret=your_secret\n")),(0,a.kt)("h4",{id:"then-to-make-a-payment-simply-inject-the-chargilyclient-in-your-service"},"then to make a payment simply inject the ChargilyClient in your service"),(0,a.kt)("p",null,"either by constructor or field injection like this (constructor injection is preferred, but I will use field injection\njust for demo)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class MyService{\n@Autowired\nprivate ChargilyEpayClient client;\n\npublic void makePayment(){\n    InvoiceModel invoice = new InvoiceModel(\n                "someClient",\n                "someEmail@mail.com",\n                "1000",\n                BigDecimal.valueOf(75.0),\n                55d,\n                "https://backurl.com/",\n                "https://webhookurl.com/",\n                Mode.CIB,\n                "a comment"\n                );\n    //handle response after you get it as a call back\n    client.makePayment(invoice, new Callback() {\n            @Override\n            public void onFailure(@NotNull Call call, @NotNull IOException e) {\n                //in case of failure\n            }\n\n            @Override\n            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\n                //in case of success\n            }\n        });\n    }\n}\n')),(0,a.kt)("p",null,"Here's a demo"),(0,a.kt)(o.Z,{playing:!0,controls:!0,url:"https://user-images.githubusercontent.com/35870420/181354840-85d35365-4720-4ff8-8ce7-78f4cf5b3cda.mp4",mdxType:"ReactPlayer"}))}u.isMDXComponent=!0}}]);