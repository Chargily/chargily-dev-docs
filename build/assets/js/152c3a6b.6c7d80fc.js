"use strict";(self.webpackChunkchargily_epay_docs=self.webpackChunkchargily_epay_docs||[]).push([[1],{8729:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=t(7462),i=(t(7294),t(3905)),r=t(2004);const l={title:"Chargily ePay with Charp",sidebar_label:"Csharp",sidebar_position:6,slug:"/epay-csharp"},o=void 0,s={unversionedId:"addons-for-programming-languages/csharp",id:"addons-for-programming-languages/csharp",title:"Chargily ePay with Charp",description:"",source:"@site/docs/addons-for-programming-languages/csharp.mdx",sourceDirName:"addons-for-programming-languages",slug:"/epay-csharp",permalink:"/chargily-dev-docs/epay-csharp",draft:!1,editUrl:"https://github.com/Chargily/chargily-dev-docs/docs/addons-for-programming-languages/csharp.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Chargily ePay with Charp",sidebar_label:"Csharp",sidebar_position:6,slug:"/epay-csharp"},sidebar:"tutorialSidebar",previous:{title:"Kotlin",permalink:"/chargily-dev-docs/epay-kotlin"},next:{title:"Ruby",permalink:"/chargily-dev-docs/epay-ruby"}},p={},d=[{value:"This package supports the following frameowrks and platforms:",id:"this-package-supports-the-following-frameowrks-and-platforms",level:2},{value:"<strong>Using DotNet CLI :</strong>",id:"using-dotnet-cli-",level:4},{value:"<strong>Using Visual Studio Dev Console:</strong>",id:"using-visual-studio-dev-console",level:4},{value:"Using Visual Studio IDE:",id:"using-visual-studio-ide",level:4},{value:"Installation &amp; Project Creation Video Guide",id:"installation--project-creation-video-guide",level:3},{value:"Implemention of the code below:",id:"implemention-of-the-code-below",level:4},{value:"<strong>Usage with any generic C# Project:</strong>",id:"usage-with-any-generic-c-project",level:3},{value:"Video Guide how to use with Minimal API",id:"video-guide-how-to-use-with-minimal-api",level:3},{value:"Video Guide how to use with ASP.NET Core WebAPI",id:"video-guide-how-to-use-with-aspnet-core-webapi",level:3},{value:"this applies to:",id:"this-applies-to",level:2},{value:"Request:",id:"request",level:3},{value:"Response:",id:"response",level:3},{value:"WebHook Validation:",id:"webhook-validation",level:3},{value:"Configuration:",id:"configuration",level:3},{value:"ASP.NET Core Middleware",id:"aspnet-core-middleware",level:2},{value:"Note when using .NET MAUI / Xamarin:",id:"note-when-using-net-maui--xamarin",level:3},{value:"This package is using <code>Microsoft.Extensions.DependencyInjection</code> dependancy injection, so it can be used with application or framework using it.",id:"this-package-is-using-microsoftextensionsdependencyinjection-dependancy-injection-so-it-can-be-used-with-application-or-framework-using-it",level:3}],u={toc:d};function c(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"this-package-supports-the-following-frameowrks-and-platforms"},"This package supports the following frameowrks and platforms:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Framework"),(0,i.kt)("th",{parentName:"tr",align:null},"Support"),(0,i.kt)("th",{parentName:"tr",align:null},"Platform"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Console"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ASP.NET Core"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Blazor WASM"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Blazor Server"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},".NET MAUI"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS, Android, iOS, Tizen")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Xamarin"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Android, iOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ASP.NET"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WPF"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"AvaloniaUI"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Linux, macOS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"UWP"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows, Xbox OS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WinForms"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null},"Windows")))),(0,i.kt)("p",null,"Any C# application that uses ",(0,i.kt)("inlineCode",{parentName:"p"},"Microsoft.Extensions.DependencyInjection")," can use this package."),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"First"),", install the ",(0,i.kt)("inlineCode",{parentName:"p"},"chargily.epay.csharp")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/chargily.epay.csharp"},"NuGet package")," into your app"),(0,i.kt)("h4",{id:"using-dotnet-cli-"},(0,i.kt)("strong",{parentName:"h4"},"Using DotNet CLI :")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"dotnet add chargily.epay.csharp\n")),(0,i.kt)("h4",{id:"using-visual-studio-dev-console"},(0,i.kt)("strong",{parentName:"h4"},"Using Visual Studio Dev Console:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"Install-Package chargily.epay.csharp\n")),(0,i.kt)("h4",{id:"using-visual-studio-ide"},"Using Visual Studio IDE:"),(0,i.kt)(r.Z,{playing:!0,controls:!0,url:"https://user-images.githubusercontent.com/35665161/186457000-dd4882d5-d683-4a58-a069-6f092f5a1498.mp4",mdxType:"ReactPlayer"}),(0,i.kt)("h1",{id:"requirements"},"Requirements"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get your API Key/Secret from ",(0,i.kt)("a",{parentName:"li",href:"https://epay.chargily.com.dz"},"ePay by Chargily")," dashboard for free")),(0,i.kt)("h1",{id:"how-to-use"},"How to use"),(0,i.kt)("h3",{id:"installation--project-creation-video-guide"},"Installation & Project Creation Video Guide"),(0,i.kt)(r.Z,{playing:!0,controls:!0,url:"https://user-images.githubusercontent.com/35665161/186457062-26920590-3e62-4154-805f-95e3688afd40.mp4",mdxType:"ReactPlayer"}),(0,i.kt)("h4",{id:"implemention-of-the-code-below"},"Implemention of the code below:"),(0,i.kt)(r.Z,{playing:!0,controls:!0,url:"https://user-images.githubusercontent.com/35665161/186457825-74178dbb-7a13-47df-9caa-cf2a90b2f50a.mp4",mdxType:"ReactPlayer"}),(0,i.kt)("h3",{id:"usage-with-any-generic-c-project"},(0,i.kt)("strong",{parentName:"h3"},"Usage with any generic C# Project:")),(0,i.kt)("p",null,"this package provide ",(0,i.kt)("inlineCode",{parentName:"p"},"ChargilyEpayClient")," client, to create payment request use: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Chargily.Epay;\n\nvar client = ChargilyEpay.CreateClient("[API_KEY]");\n\nvar payment = new EpayPaymentRequest()\n{\n    InvoiceNumber = "[INVOICE_NUMBER]",\n    Name = "Ahmed",\n    Email = "rainxh11@gmail.com",\n    Amount = 1500,\n    DiscountPercentage = 5.0,\n    PaymentMethod = PaymentMethod.EDAHABIA,\n    BackUrl = "https://yourapp.com/",\n    WebhookUrl = "https://api.yourbackend.com/webhook-validator",\n    ExtraInfo = "Product Purchase"\n};\n\nvar response = await client.CreatePayment(payment);\n')),(0,i.kt)("h1",{id:"usage-with-aspnet-core"},"Usage with ASP.NET Core"),(0,i.kt)("h3",{id:"video-guide-how-to-use-with-minimal-api"},"Video Guide how to use with Minimal API"),(0,i.kt)(r.Z,{playing:!0,controls:!0,url:"https://user-images.githubusercontent.com/35665161/186486826-22b04394-7210-466f-b5ed-58cddc930848.mp4",mdxType:"ReactPlayer"}),(0,i.kt)("h3",{id:"video-guide-how-to-use-with-aspnet-core-webapi"},"Video Guide how to use with ASP.NET Core WebAPI"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Soon")),(0,i.kt)("h2",{id:"this-applies-to"},"this applies to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ASP.NET Core WebAPI"),(0,i.kt)("li",{parentName:"ul"},"ASP.NET Core Minimal WebAPI "),(0,i.kt)("li",{parentName:"ul"},"Blazor Server "),(0,i.kt)("li",{parentName:"ul"},"Blazor WASM "),(0,i.kt)("li",{parentName:"ul"},"ASP.NET Core MVC")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Chargily.Epay;\nusing Microsoft.AspNetCore.Mvc;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddChargilyEpayGateway("[API_KEY]");\n\nvar app = builder.Build();\n\napp.MapPost("/invoice",\n    async ([FromBody] EpayPaymentRequest request,\n        [FromServices] IChargilyEpayClient<EpayPaymentResponse, EpayPaymentRequest> chargilyClient) =>\n    {\n        return await chargilyClient.CreatePayment(request);\n    });\n\napp.Run();\n')),(0,i.kt)("h3",{id:"request"},"Request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "invoice_number" : "321616",\n    "client" : "Ahmed",\n    "client_email" : "rainxh11@gmail.com",\n    "amount" : 1500,\n    "discount" : 5.0,\n    "mode" : "EDAHABIA",\n    "back_url" : "https://example.com/",\n    "webhook_url" : "https://shop.com/purchase",\n    "comment" : "Product Purchase"\n}\n')),(0,i.kt)("h3",{id:"response"},"Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "httpStatusCode": 201,\n    "responseMessage": {\n        "Message": "Success"\n    },\n    "isSuccessful": true,\n    "isRequestValid": true,\n    "body": {\n        "checkout_url": "https://epay.chargily.com.dz/checkout/d00c1e652200798bbc35f688b2910fa9bc6c4c30d38b51e3f4142e407fa7c141"\n    },\n    "createdOn": "2022-05-06T03:55:49.6527862+01:00"\n}\n')),(0,i.kt)("h3",{id:"webhook-validation"},"WebHook Validation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Chargily.Epay;\nusing Microsoft.AspNetCore.Mvc;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddChargilyWebHookValidator("[APP_SECRET]");\n\nvar app = builder.Build();\napp.MapPost("/webhook-validator", ([FromServices] IWebHookValidator validator, HttpRequest request) =>\n{\n    var signature = request.Headers["Signature"].First();\n    var validation = validator.Validate(signature, request.Body);\n\n    return validation;\n});\n\napp.Run();\n')),(0,i.kt)("h3",{id:"configuration"},"Configuration:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"API_KEY")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"APP_SECRET")," can be added directly in code or from ",(0,i.kt)("inlineCode",{parentName:"p"},"appsettings.json")," configuration file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'builder.Services.AddChargilyWebHookValidator("[APP_SECRET]");\nbuilder.Services.AddChargilyEpayGateway("[API_KEY]");\n\n// OR\n\nbuilder.Services.AddChargilyWebHookValidator(builder.Configuration["CHARGILY_APP_SECRET"]);\nbuilder.Services.AddChargilyEpayGateway(builder.Configuration["CHARGILY_API_KEY"]);\n\n// OR\n// Same as previous but it will be loaded automatically from appsettings.json\nbuilder.Services.AddChargilyWebHookValidator());\nbuilder.Services.AddChargilyEpayGateway();\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"appsettings.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft.AspNetCore": "Warning"\n    }\n  },\n  "AllowedHosts": "*",\n  "CHARGILY_APP_SECRET": "[APP_SECRET]", // <-- APP SECRET\n  "CHARGILY_API_KEY": "[API_KEY]" // <-- API KEY\n}\n')),(0,i.kt)("h2",{id:"aspnet-core-middleware"},"ASP.NET Core Middleware"),(0,i.kt)("p",null,"This package provide ",(0,i.kt)("inlineCode",{parentName:"p"},"WebHookValidatorMiddleware")," ASP.NET Core Middleware, when registered every ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," request that have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Signature")," Http Header will be validated automatically.\nHow to register the Middleware:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Chargily.Epay;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddChargilyEpayGateway("[API_KEY]");\n\nbuilder.Services\n    .AddChargilyValidatorMiddleware("[APP_SECRET]"); // WebHookValidatorMiddleware have to be registered\n\nvar app = builder.Build();\n\napp.UseChargilyValidatorMiddleware();\n\napp.Run();\n')),(0,i.kt)("h1",{id:"usage-with-net-maui"},"Usage with .NET MAUI"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.Maui;\nusing Microsoft.Maui.Hosting;\nusing Microsoft.Maui.Controls.Compatibility;\nusing Microsoft.Maui.Controls.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Chargily.Epay;\n\nnamespace MyApp\n{\n  public static class MauiProgram\n  {\n    public static MauiApp CreateMauiApp()\n    {\n      var builder = MauiApp.CreateBuilder();\n      builder.UseMauiApp<App>();\n      builder.Services.AddChargilyEpayGateway("[API_KEY]");\n      return builder.Build();\n    }\n  }\n}\n')),(0,i.kt)("p",null,"then you can add in ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModels"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MainViewModel : ViewModelBase  \n{  \n    private ChargilyEpayClient _chargilyClient;  \n    private IWebHookValidator _webhookValidator;\n\n    public MainViewModel(ChargilyEpayClient chargilyClient)  \n    {  \n        _chargilyClient = chargilyClient;  \n    }  \n    // With Validator\n    public MainViewModel(ChargilyEpayClient chargilyClient, IWebHookValidator webhookValidator)  \n    {  \n        _chargilyClient = chargilyClient;  \n        _webhookValidator = webhookValidator;\n    }  \n}\n")),(0,i.kt)("h3",{id:"note-when-using-net-maui--xamarin"},"Note when using .NET MAUI / Xamarin:"),(0,i.kt)("p",null,"storing sensitive ",(0,i.kt)("inlineCode",{parentName:"p"},"APP_SECRET")," in a frontend app is not a recommended approach, you'd be better off calling a backend api to handle payment, but it's doable.\nif you decide to use it in the frontend, consider storing ",(0,i.kt)("inlineCode",{parentName:"p"},"APP_SECRET")," with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reactiveui/Akavache"},(0,i.kt)("inlineCode",{parentName:"a"},"Akavache"))," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/reactiveui/Akavache#choose-a-location"},(0,i.kt)("inlineCode",{parentName:"a"},"BlobCache.Secure"))),(0,i.kt)("h3",{id:"this-package-is-using-microsoftextensionsdependencyinjection-dependancy-injection-so-it-can-be-used-with-application-or-framework-using-it"},"This package is using ",(0,i.kt)("a",{parentName:"h3",href:"https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection"},(0,i.kt)("inlineCode",{parentName:"a"},"Microsoft.Extensions.DependencyInjection"))," dependancy injection, so it can be used with application or framework using it."))}c.isMDXComponent=!0}}]);